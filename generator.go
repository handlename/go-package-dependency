package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
)

type Generator struct{}

func NewGenerator() *Generator {
	return &Generator{}
}

func (g *Generator) GenerateDependencyFiles(baseDir string, config *DependencyConfig) error {
	// Get module name from go.mod
	parser := NewParser()
	moduleName, err := parser.GetModuleName(filepath.Join(baseDir, "go.mod"))
	if err != nil {
		return err
	}

	// Generate dependency.gen.go for each package
	allPackages := config.GetAllPackages()
	for _, pkg := range allPackages {
		packageDir := filepath.Join(baseDir, pkg.Path.String())

		// Check if directory exists, create if not
		if _, err := os.Stat(packageDir); os.IsNotExist(err) {
			err := os.MkdirAll(packageDir, 0755)
			if err != nil {
				return DirectoryCreationError{Path: packageDir, Err: err}
			}
		}

		// Get dependencies for this package
		dependencies := config.GetDependenciesForPackage(pkg)

		// Generate the dependency file content
		content := g.GenerateDependencyFileContent(pkg.Path, dependencies, moduleName)

		// Write the file
		outputPath := filepath.Join(packageDir, "dependency.gen.go")
		err := os.WriteFile(outputPath, []byte(content), 0644)
		if err != nil {
			return FileWriteError{Path: outputPath, Err: err}
		}

		// Format the generated file with go fmt
		cmd := exec.Command("go", "fmt", outputPath)
		if err := cmd.Run(); err != nil {
			return FileFormatError{Path: outputPath, Err: err}
		}
	}

	return nil
}

func (g *Generator) GenerateDependencyFileContent(currentPackagePath LayerPath, dependencies []LayerPath, moduleName ModuleName) string {
	packageName := GetPackageName(currentPackagePath)

	// Sort dependencies for consistent output
	sort.Slice(dependencies, func(i, j int) bool {
		return string(dependencies[i]) < string(dependencies[j])
	})

	var imports []string
	for _, depPath := range dependencies {
		importPath := fmt.Sprintf("%s/%s", moduleName.String(), depPath.String())
		imports = append(imports, fmt.Sprintf("\t_ \"%s\"", importPath))
	}

	content := fmt.Sprintf("// Code generated by go-package-dependency. DO NOT EDIT.\n\npackage %s\n", packageName.String())

	if len(imports) > 0 {
		content += "\nimport (\n"
		for _, imp := range imports {
			content += imp + "\n"
		}
		content += ")\n"
	}

	return content
}
